"""Quantum-inspired game commands. See: docs/api/quantum_game_commands.md"""

import asyncio
import logging
from typing import Optional
from twitchio.ext import commands

from backends.quantum_game_cache import QuantumGameCache


class QuantumGameCommands(commands.Cog):
    """Commandes de jeu avec comportements quantiques."""
    
    def __init__(self, bot):
        self.bot = bot
        self.logger = logging.getLogger(__name__)
        
        # Cache quantique des jeux
        self.quantum_game_cache: Optional[QuantumGameCache] = None
        
        # Initialiser le cache si config disponible
        if hasattr(bot, 'config'):
            try:
                self.quantum_game_cache = QuantumGameCache(bot.config)
                self.logger.info("üéÆüî¨ QuantumGameCache initialis√©")
            except Exception as e:
                self.logger.error(f"Erreur init QuantumGameCache: {e}")
    
    @commands.command(name='qgame', aliases=['qg'])
    async def quantum_game_search(self, ctx: commands.Context, *, game_name: str = ""):
        """
        !qgame <nom> - Recherche quantique de jeu
        
        SUPERPOSITION: Propose des √©tats possibles jusqu'√† validation
        OBSERVATION: Chaque recherche influence les probabilit√©s futures
        """
        if not self.quantum_game_cache:
            await ctx.send("üö´ Cache quantique non disponible")
            return
        
        if not game_name:
            await ctx.send("‚ùì Usage: !qgame <nom du jeu> (ex: !qgame hades)")
            return
        
        observer = ctx.author.name
        
        try:
            # Recherche quantique avec observation
            result = await self.quantum_game_cache.search_quantum_game(
                query=game_name,
                observer=observer
            )
            
            if not result:
                await ctx.send(f"‚ùå Aucun jeu quantique trouv√© pour: {game_name}")
                return
            
            # INTERFACE VISUELLE QUANTIQUE ‚öõÔ∏è
            visual_format = self.quantum_game_cache.format_quantum_visual(result)
            formatted = self.quantum_game_cache.format_quantum_game_result(result)
            
            # Affichage visuel + d√©tails
            response = f"{visual_format}\n{formatted}"
            
            # Ajouter infos quantiques si superposition
            if result.get('verified') != 1:
                suggestions = self.quantum_game_cache.get_quantum_suggestions(game_name)
                if len(suggestions) > 1:
                    response += f" ‚Ä¢ {len(suggestions)} √©tats en superposition"
            
            await ctx.send(response)
            
            self.logger.info(f"üîç Recherche quantique: {game_name} par {observer}")
            
        except Exception as e:
            self.logger.error(f"Erreur recherche quantique {game_name}: {e}")
            await ctx.send(f"‚ö†Ô∏è Erreur recherche quantique: {game_name}")
    
    @commands.command(name='collapse', aliases=['confirm'])
    async def collapse_game_state(self, ctx: commands.Context, *, game_name: str = ""):
        """
        !collapse <jeu> - COLLAPSE quantique (fixe l'√©tat d√©finitivement)
        
        EFFONDREMENT: Superposition ‚Üí √âtat permanent (verified: 1)
        LEARNING: Le bot apprend de vos confirmations
        """
        if not self.quantum_game_cache:
            await ctx.send("üö´ Cache quantique non disponible")
            return
        
        if not game_name:
            await ctx.send("‚ùì Usage: !collapse <nom du jeu> (ex: !collapse hades)")
            return
        
        observer = ctx.author.name
        
        try:
            # Tentative de collapse
            success = self.quantum_game_cache.confirm_game(
                query=game_name,
                observer=observer
            )
            
            if success:
                await ctx.send(f"üí• @{observer} a fait COLLAPSE l'√©tat '{game_name}' ‚Üí √âtat fig√© permanent !")
                self.logger.info(f"üí• Collapse quantique: {game_name} par {observer}")
            else:
                # V√©rifier si le jeu existe en superposition
                suggestions = self.quantum_game_cache.get_quantum_suggestions(game_name)
                if suggestions:
                    await ctx.send(f"‚ö†Ô∏è √âtat '{game_name}' d√©j√† collapsed ou inexistant. "
                                 f"Utilisez !qgame {game_name} d'abord")
                else:
                    await ctx.send(f"‚ùå Aucun √©tat quantique trouv√© pour: {game_name}")
                    
        except Exception as e:
            self.logger.error(f"Erreur collapse {game_name}: {e}")
            await ctx.send(f"‚ö†Ô∏è Erreur collapse: {game_name}")
    
    @commands.command(name='qstats', aliases=['quantumstats'])  
    async def quantum_game_stats(self, ctx: commands.Context):
        """
        !qstats - Statistiques du syst√®me quantique des jeux
        
        M√âTRIQUES: √âtats, superpositions, intrications, apprentissage
        """
        if not self.quantum_game_cache:
            await ctx.send("üö´ Cache quantique non disponible")
            return
        
        try:
            stats = self.quantum_game_cache.get_quantum_game_stats()
            
            message = (f"üî¨ Cache Quantique Jeux: {stats['game_keys']} jeux, "
                      f"{stats['confirmed_games']} confirm√©s, "
                      f"{stats['pending_games']} en superposition, "
                      f"{stats['entangled_pairs']} intrications, "
                      f"apprentissage: {stats['learning_rate']:.1%}")
            
            await ctx.send(message)
            self.logger.info(f"üìä Stats quantiques jeux par {ctx.author.name}")
            
        except Exception as e:
            self.logger.error(f"Erreur stats quantiques: {e}")
            await ctx.send("‚ö†Ô∏è Erreur r√©cup√©ration statistiques quantiques")
    
    @commands.command(name='qdash', aliases=['quantumdash', 'qboard'])
    async def quantum_dashboard(self, ctx: commands.Context, *, query: str = ""):
        """
        !qdash [jeu] - Dashboard visuel quantique
        
        INTERFACE: Affichage visuel des √©tats quantiques avec barres de progression
        """
        if not self.quantum_game_cache:
            await ctx.send("üö´ Cache quantique non disponible")
            return
        
        try:
            # G√©n√©ration dashboard visuel
            if query.strip():
                dashboard = self.quantum_game_cache.format_quantum_dashboard(query)
            else:
                dashboard = self.quantum_game_cache.format_quantum_dashboard()
            
            if "üî¨ [SERDA_BOT]" in dashboard and len(dashboard.split('\n')) > 1:
                await ctx.send(dashboard)
            else:
                await ctx.send("üî¨ [SERDA_BOT]\nüí´ Aucun √©tat quantique actif")
            
            self.logger.info(f"üìä Dashboard quantique consult√© par {ctx.author.name}")
            
        except Exception as e:
            self.logger.error(f"Erreur dashboard quantique: {e}")
            await ctx.send("‚ö†Ô∏è Erreur affichage dashboard quantique")

    @commands.command(name='qsuggest', aliases=['suggest'])
    async def quantum_suggestions(self, ctx: commands.Context, *, game_name: str = ""):
        """
        !qsuggest <jeu> - Affiche tous les √©tats en superposition
        
        SUPERPOSITION: Visualise tous les √©tats possibles avant collapse
        """
        if not self.quantum_game_cache:
            await ctx.send("üö´ Cache quantique non disponible")
            return
        
        if not game_name:
            await ctx.send("‚ùì Usage: !qsuggest <nom du jeu>")
            return
        
        try:
            suggestions = self.quantum_game_cache.get_quantum_suggestions(game_name)
            
            if not suggestions:
                await ctx.send(f"‚ùå Aucune superposition trouv√©e pour: {game_name}")
                return
            
            if len(suggestions) == 1 and suggestions[0]['verified'] == 1:
                await ctx.send(f"üîí {game_name}: √âtat d√©j√† collapsed (permanent)")
                return
            
            # Formater suggestions multiples
            lines = [f"‚öõÔ∏è {game_name}: {len(suggestions)} √©tats en superposition:"]
            for i, sugg in enumerate(suggestions):
                status = "üîí" if sugg['verified'] == 1 else "‚öõÔ∏è"
                conf_bar = "‚ñà" * int(sugg['confidence'] * 5)  # Barre sur 5
                lines.append(f"[{i}] {status} {sugg['name']} ({sugg['year']}) "
                           f"{conf_bar} {sugg['confidence']:.1f}")
            
            # Limite Twitch (max ~400 chars)
            message = " ‚Ä¢ ".join(lines[:3])  # Max 3 suggestions affich√©es
            if len(suggestions) > 3:
                message += f" ‚Ä¢ +{len(suggestions)-3} autres"
            
            await ctx.send(message)
            self.logger.info(f"üìã Suggestions quantiques: {game_name} par {ctx.author.name}")
            
        except Exception as e:
            self.logger.error(f"Erreur suggestions {game_name}: {e}")
            await ctx.send(f"‚ö†Ô∏è Erreur suggestions: {game_name}")
    
    @commands.command(name='qentangle', aliases=['link'])
    async def entangle_games(self, ctx: commands.Context, game1: str = "", game2: str = ""):
        """
        !qentangle <jeu1> <jeu2> - Cr√©er intrication entre jeux
        
        INTRICATION: Confirmations d'un jeu influencent l'autre
        """
        if not self.quantum_game_cache:
            await ctx.send("üö´ Cache quantique non disponible")
            return
        
        if not game1 or not game2:
            await ctx.send("‚ùì Usage: !qentangle <jeu1> <jeu2>")
            return
        
        # V√©rifier permissions (√©viter spam)
        if not (ctx.author.is_mod or ctx.author.is_broadcaster):
            await ctx.send("‚ö†Ô∏è Intrication r√©serv√©e aux mod√©rateurs")
            return
        
        try:
            key1 = f"game:{game1.lower()}"
            key2 = f"game:{game2.lower()}"
            
            self.quantum_game_cache.quantum_cache.entangle(key1, key2)
            
            observer = ctx.author.name
            await ctx.send(f"üîó @{observer} a cr√©√© intrication: {game1} ‚Üî {game2}")
            self.logger.info(f"üîó Intrication jeux: {game1} ‚Üî {game2} par {observer}")
            
        except Exception as e:
            self.logger.error(f"Erreur intrication {game1}/{game2}: {e}")
            await ctx.send(f"‚ö†Ô∏è Erreur intrication: {game1} ‚Üî {game2}")
    
    @commands.command(name='qclean', aliases=['decoherence'])
    async def quantum_cleanup(self, ctx: commands.Context):
        """
        !qclean - D√©coh√©rence manuelle (√©vaporation √©tats expir√©s)
        
        D√âCOH√âRENCE: Supprime les "particules virtuelles" non-confirm√©es
        """
        if not self.quantum_game_cache:
            await ctx.send("üö´ Cache quantique non disponible")
            return
        
        # Permissions mod√©rateurs seulement
        if not (ctx.author.is_mod or ctx.author.is_broadcaster):
            await ctx.send("‚ö†Ô∏è D√©coh√©rence r√©serv√©e aux mod√©rateurs")
            return
        
        try:
            cleaned_count = await self.quantum_game_cache.cleanup_quantum_games()
            
            observer = ctx.author.name
            await ctx.send(f"üí® @{observer} a d√©clench√© d√©coh√©rence ‚Üí "
                          f"{cleaned_count} √©tats √©vapor√©s")
            self.logger.info(f"üí® D√©coh√©rence manuelle: {cleaned_count} par {observer}")
            
        except Exception as e:
            self.logger.error(f"Erreur d√©coh√©rence: {e}")
            await ctx.send("‚ö†Ô∏è Erreur d√©coh√©rence quantique")
    
    @commands.command(name='qhelp', aliases=['qh'])
    async def quantum_help(self, ctx: commands.Context):
        """
        !qhelp - Aide commandes quantiques
        
        DOCUMENTATION: Guide d'utilisation du syst√®me quantique
        """
        help_text = ("üî¨ Commandes Quantiques: !qgame <jeu> (recherche), "
                    "!collapse <jeu> (confirmer), !qstats (stats), "
                    "!qsuggest <jeu> (voir superposition), "
                    "!qhelp (aide) ‚Ä¢ Syst√®me d'apprentissage adaptatif !")
        
        await ctx.send(help_text)
    
    async def cog_unload(self):
        """Nettoyage √† la d√©charge du cog."""
        if self.quantum_game_cache:
            await self.quantum_game_cache.close()


def prepare(bot):
    """Pr√©pare le cog pour TwitchIO."""
    bot.add_cog(QuantumGameCommands(bot))