#!/bin/bash

# ============================================
# KissBot V1 - INSTALLEUR AUTOMATIQUE
# ============================================
# Usage: curl -sSL https://raw.githubusercontent.com/ElSerda/SerdaBot/kissbot/install.sh | bash
# - T√©l√©charge KissBot depuis GitHub
# - Installe toutes les d√©pendances
# - Configure l'environnement
# - Guide l'utilisateur pour la config finale
# ============================================

set -e  # Exit on error

# Configuration
REPO_URL="https://github.com/ElSerda/SerdaBot"
BRANCH="kissbot"
INSTALL_DIR="KissBot-V1"
KISSBOT_DIR="KissBot"

# Couleurs pour affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}============================================${NC}"
echo -e "${CYAN}üöÄ   INSTALLEUR KISSBOT V1 - TWITCH BOT${NC}"
echo -e "${CYAN}============================================${NC}"
echo ""

# V√©rification OS
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="Linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macOS"
elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
    OS="Windows (Git Bash)"
else
    OS="Inconnu"
fi

echo -e "${BLUE}üñ•Ô∏è  Syst√®me d√©tect√©: $OS${NC}"
echo ""

# V√©rification des pr√©requis
echo -e "${YELLOW}üîç V√©rification des pr√©requis...${NC}"

# Git
if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Git non trouv√©.${NC}"
    echo -e "${YELLOW}üí° Installez Git:${NC}"
    echo -e "   Ubuntu/Debian: sudo apt install git"
    echo -e "   macOS: brew install git"
    echo -e "   Windows: https://git-scm.com/"
    exit 1
fi
echo -e "${GREEN}‚úÖ Git: $(git --version)${NC}"

# Python3
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python3 non trouv√©.${NC}"
    echo -e "${YELLOW}üí° Installez Python 3.8+:${NC}"
    echo -e "   Ubuntu/Debian: sudo apt install python3 python3-pip python3-venv"
    echo -e "   macOS: brew install python3"
    echo -e "   Windows: https://python.org"
    exit 1
fi
PYTHON_VERSION=$(python3 --version)
echo -e "${GREEN}‚úÖ Python: $PYTHON_VERSION${NC}"

# Pip
if ! command -v pip3 &> /dev/null && ! python3 -m pip --version &> /dev/null; then
    echo -e "${RED}‚ùå Pip non trouv√©.${NC}"
    echo -e "${YELLOW}üí° Installez pip: sudo apt install python3-pip${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Pip disponible${NC}"

echo ""
echo -e "${PURPLE}üéØ Tous les pr√©requis sont OK !${NC}"
echo ""

# T√©l√©chargement
echo -e "${YELLOW}üì• T√©l√©chargement de KissBot V1...${NC}"

if [ -d "$INSTALL_DIR" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Le dossier $INSTALL_DIR existe d√©j√†.${NC}"
    read -p "Voulez-vous le supprimer et recommencer ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$INSTALL_DIR"
        echo -e "${GREEN}‚úÖ Dossier nettoy√©${NC}"
    else
        echo -e "${RED}‚ùå Installation annul√©e${NC}"
        exit 1
    fi
fi

echo -e "${BLUE}üîÑ Clonage du repository...${NC}"
git clone -b "$BRANCH" "$REPO_URL" "$INSTALL_DIR"

# Navigation vers KissBot
cd "$INSTALL_DIR/$KISSBOT_DIR"

echo -e "${GREEN}‚úÖ KissBot t√©l√©charg√© avec succ√®s !${NC}"
echo ""

# Installation des d√©pendances
echo -e "${YELLOW}üì¶ Installation des d√©pendances Python...${NC}"

# Cr√©ation environnement virtuel
echo -e "${BLUE}üîß Cr√©ation de l'environnement virtuel...${NC}"
python3 -m venv kissbot-venv

# Activation
echo -e "${BLUE}üîß Activation de l'environnement...${NC}"
source kissbot-venv/bin/activate

# Installation requirements
echo -e "${BLUE}üìã Installation des packages...${NC}"
pip install -r requirements.txt

echo -e "${GREEN}‚úÖ Toutes les d√©pendances install√©es !${NC}"
echo ""

# Configuration
echo -e "${PURPLE}‚öôÔ∏è  CONFIGURATION FINALE${NC}"
echo -e "${PURPLE}========================${NC}"
echo ""

# Copie du template config
if [ ! -f "config.yaml" ]; then
    if [ -f "config.yaml.example" ]; then
        cp config.yaml.example config.yaml
        echo -e "${GREEN}‚úÖ Fichier config.yaml cr√©√© depuis le template${NC}"
    else
        echo -e "${RED}‚ùå Template de configuration manquant${NC}"
        exit 1
    fi
fi

echo -e "${CYAN}üéÆ Configuration de votre bot Twitch:${NC}"
echo ""

# Rendre les scripts ex√©cutables
chmod +x start_kissbot.sh

# D√©tection OS et proposition LLM local
echo ""
echo -e "${PURPLE}ü§ñ CONFIGURATION LLM LOCAL (OPTIONNEL)${NC}"
echo -e "${PURPLE}====================================${NC}"

# D√©tecter l'OS
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo -e "${CYAN}üêß Linux d√©tect√© - Ollama recommand√© !${NC}"
    echo ""
    echo -e "${YELLOW}üí° Voulez-vous installer Ollama maintenant ? (y/N)${NC}"
    read -p ">>> " install_ollama
    
    if [[ $install_ollama =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üì• Installation d'Ollama...${NC}"
        
        # Installation Ollama
        if curl -fsSL https://ollama.ai/install.sh | sh; then
            echo -e "${GREEN}‚úÖ Ollama install√© avec succ√®s !${NC}"
            
            # D√©marrer Ollama en service
            echo -e "${BLUE}üîß Configuration du service Ollama...${NC}"
            sudo systemctl start ollama 2>/dev/null || true
            sudo systemctl enable ollama 2>/dev/null || true
            
            # Attendre que le service d√©marre
            sleep 3
            
            # T√©l√©charger mod√®le recommand√©
            echo -e "${BLUE}üì¶ T√©l√©chargement du mod√®le Qwen 7B (recommand√©)...${NC}"
            echo -e "${YELLOW}‚è≥ Cela peut prendre quelques minutes...${NC}"
            
            if ollama pull qwen2.5:7b-instruct; then
                echo -e "${GREEN}‚úÖ Mod√®le Qwen 7B install√© !${NC}"
                
                # Mise √† jour automatique config.yaml pour Ollama
                echo -e "${BLUE}‚öôÔ∏è  Configuration automatique pour Ollama...${NC}"
                
                # Backup config original
                cp config.yaml config.yaml.backup
                
                # Mise √† jour de l'endpoint pour Ollama
                sed -i 's|model_endpoint: "http://127.0.0.1:1234/v1/chat/completions"|model_endpoint: "http://127.0.0.1:11434/v1/chat/completions"|g' config.yaml
                sed -i 's|model_name: "llama-3.2-3b-instruct"|model_name: "qwen2.5:7b-instruct"|g' config.yaml
                
                echo -e "${GREEN}‚úÖ Configuration Ollama appliqu√©e !${NC}"
                echo -e "${CYAN}üìù Endpoint: http://127.0.0.1:11434 (port Ollama)${NC}"
                echo -e "${CYAN}ü§ñ Mod√®le: qwen2.5:7b-instruct${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Erreur t√©l√©chargement mod√®le - configurez manuellement${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Erreur installation Ollama - utilisez LM Studio ou OpenAI${NC}"
        fi
    else
        echo -e "${CYAN}üí° Pas de probl√®me ! Vous pouvez :${NC}"
        echo -e "${CYAN}- Installer LM Studio (Windows/Mac): https://lmstudio.ai${NC}"
        echo -e "${CYAN}- Installer Ollama plus tard: curl -fsSL https://ollama.ai/install.sh | sh${NC}"
        echo -e "${CYAN}- Utiliser uniquement OpenAI (config dans config.yaml)${NC}"
    fi
elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
    echo -e "${CYAN}ü™ü Windows d√©tect√© - LM Studio recommand√© !${NC}"
    echo -e "${CYAN}üì• T√©l√©chargez LM Studio: https://lmstudio.ai${NC}"
    echo -e "${CYAN}ü§ñ Mod√®le recommand√©: Qwen 7B ou LLaMA 8B${NC}"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo -e "${CYAN}üçé macOS d√©tect√© - LM Studio ou Ollama${NC}"
    echo -e "${CYAN}üì• LM Studio: https://lmstudio.ai (GUI)${NC}"
    echo -e "${CYAN}üì• Ollama: curl -fsSL https://ollama.ai/install.sh | sh (CLI)${NC}"
fi

echo ""

# Guide utilisateur
echo -e "${YELLOW}üìù √âTAPES SUIVANTES:${NC}"
echo ""
echo -e "${BLUE}1.${NC} Consultez le guide complet APIs & Tokens:"
echo -e "   ${CYAN}cat COMPLETE_API_SETUP_GUIDE.md${NC}  # Guide d√©taill√© TOUT"
echo -e "   ${CYAN}cat OLLAMA_LINUX_SETUP.md${NC}      # Guide Linux/Ollama complet"
echo ""
echo -e "${BLUE}2.${NC} Configuration EXPRESS (10 min max) :"
echo -e "   - Token Twitch : https://twitchtokengenerator.com/"
echo -e "   - App Twitch : https://dev.twitch.tv/console/apps"
echo -e "   - RAWG API (gratuit) : https://rawg.io/apidocs"
echo -e "   - OpenAI (optionnel) : https://platform.openai.com/"
echo ""
echo -e "${BLUE}3.${NC} Modifiez la configuration:"
echo -e "   ${CYAN}nano config.yaml${NC}  # ou votre √©diteur pr√©f√©r√©"
echo ""
echo -e "${BLUE}4.${NC} Validez votre configuration:"
echo -e "   ${CYAN}python3 validate_config.py${NC}  # V√©rification automatique YAML"
echo ""
echo -e "${BLUE}5.${NC} Lancez votre bot:"
echo -e "   ${CYAN}./start_kissbot.sh${NC}"
echo ""

echo -e "${GREEN}‚úÖ Installation termin√©e avec succ√®s !${NC}"
echo ""
echo -e "${PURPLE}üìÇ Votre bot est install√© dans: $(pwd)${NC}"
echo -e "${PURPLE}üöÄ Pr√™t √† lancer avec ./start_kissbot.sh${NC}"
echo ""
echo -e "${CYAN}üéä Bienvenue dans KissBot V1 - Keep It Simple, Stupid!${NC}"