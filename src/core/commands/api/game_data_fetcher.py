"""
Game Data Fetcher - Gestionnaire centralis√© des sources de donn√©es de jeux.

Ce module orchestre les diff√©rentes APIs pour r√©cup√©rer les informations
sur les jeux vid√©o avec un syst√®me de priorit√© et fallback.

Priorit√© des sources :
    1. Cache (si disponible)
    2. RAWG (source principale - la plus compl√®te et √† jour)
    3. IGDB API (fallback si RAWG √©choue)
    4. IGDB Web scraping (dernier recours)
"""
from typing import Dict, Optional

from core.cache import GAME_CACHE, get_cache_key, get_ttl_for_game

from .igdb_api import get_igdb_token, query_game, search_igdb_web
from .rawg_api import fetch_game_from_rawg


async def fetch_game_data(game_name: str, config: dict, cache_only: bool = False) -> Optional[Dict]:
    """
    Point d'entr√©e UNIQUE pour r√©cup√©rer des donn√©es de jeu.
    
    Impl√©mente une strat√©gie de fallback en cascade :
        Cache ‚Üí RAWG ‚Üí IGDB API ‚Üí IGDB Web ‚Üí None
    
    Args:
        game_name: Nom du jeu √† rechercher
        config: Configuration globale du bot
        cache_only: Si True, retourne uniquement depuis le cache (tests)
    
    Returns:
        Dict avec les donn√©es du jeu (format normalis√©), ou None si non trouv√©.
        
        Format retourn√© (normalis√© entre toutes les sources):
        {
            'name': str,
            'slug': str,
            'summary': str,
            'release_date': str | int,
            'release_year': str,
            'platforms': list[str] | str,
            'developers': list[str],       # Seulement si RAWG
            'publishers': list[str],       # Seulement si RAWG
            'metacritic': int | None,      # Seulement si RAWG
            'rating': float | None,        # Seulement si RAWG
            'ratings_count': int,          # Seulement si RAWG
            'genres': list[str],           # Seulement si RAWG
            'tags': list[str],             # Seulement si RAWG
            'stores': list[dict],          # Seulement si RAWG
            'background_image': str | None,# Seulement si RAWG
        }
    
    Example:
        >>> config = load_config()
        >>> data = await fetch_game_data("Hades", config)
        >>> print(f"{data['name']} - {data['rating']}/5")
        'Hades - 4.4/5'
    """
    print(f"[GAME-DATA] üîç Recherche de '{game_name}'...")
    
    # üîç √âTAPE 0 : V√©rifier le cache
    cache_key = get_cache_key("gamedata", game_name)
    cached_data = GAME_CACHE.get(cache_key)
    
    if cached_data:
        print(f"[GAME-DATA] ‚ö° CACHE HIT: {cached_data['name']}")
        return cached_data
    
    # Mode cache only pour les tests (skip API)
    if cache_only:
        print(f"[GAME-DATA] ‚ö†Ô∏è Mode CACHE ONLY: Jeu non trouv√© dans le cache")
        return None
    
    # ÔøΩ √âTAPE 1 : RAWG en priorit√© (source principale)
    print("[GAME-DATA] üì° Tentative RAWG...")
    rawg_data = await fetch_game_from_rawg(game_name, config)
    
    if rawg_data:
        print(f"[GAME-DATA] ‚úÖ RAWG r√©ussi: {rawg_data['name']}")
        
        # Mettre en cache avec TTL adapt√©
        ttl = get_ttl_for_game(rawg_data.get('release_year', '?'))
        GAME_CACHE.set(cache_key, rawg_data, ttl=ttl)
        print(f"[GAME-DATA] üíæ Mis en cache (TTL: {ttl}s)")
        
        return rawg_data
    
    # ‚ö†Ô∏è √âTAPE 2 : Fallback IGDB API
    print("[GAME-DATA] ‚ö†Ô∏è RAWG √©chec, tentative IGDB API...")
    
    try:
        token = get_igdb_token()
        igdb_data = query_game(game_name, token)
        
        if igdb_data:
            # Normaliser le format IGDB pour matcher RAWG
            normalized = _normalize_igdb_data(igdb_data)
            print(f"[GAME-DATA] ‚úÖ IGDB API r√©ussi: {normalized['name']}")
            
            # Mettre en cache aussi
            ttl = get_ttl_for_game(normalized.get('release_year', '?'))
            GAME_CACHE.set(cache_key, normalized, ttl=ttl)
            print(f"[GAME-DATA] üíæ Mis en cache (TTL: {ttl}s)")
            
            return normalized
            
    except Exception as e:
        print(f"[GAME-DATA] ‚ùå IGDB API erreur: {e}")
    
    # üíÄ √âTAPE 3 : Dernier recours - Web scraping IGDB
    print("[GAME-DATA] ‚ö†Ô∏è IGDB API √©chec, tentative web scraping...")
    
    try:
        web_data = await search_igdb_web(game_name)
        
        if web_data:
            # Normaliser le format web scraping
            normalized = _normalize_igdb_data(web_data)
            print(f"[GAME-DATA] ‚úÖ Web scraping r√©ussi: {normalized['name']}")
            
            # Mettre en cache aussi (TTL plus court car moins fiable)
            GAME_CACHE.set(cache_key, normalized, ttl=1800)  # 30min
            print(f"[GAME-DATA] üíæ Mis en cache (TTL: 1800s)")
            
            return normalized
            
    except Exception as e:
        print(f"[GAME-DATA] ‚ùå Web scraping erreur: {e}")
    
    # ‚ùå Aucune source n'a trouv√© le jeu
    print(f"[GAME-DATA] ‚ùå Aucune source n'a trouv√© '{game_name}'")
    return None


def _normalize_igdb_data(igdb_data: dict) -> dict:
    """
    Normalise les donn√©es IGDB pour matcher le format RAWG.
    
    IGDB retourne un format diff√©rent de RAWG, cette fonction
    assure la compatibilit√© entre les deux sources.
    
    Args:
        igdb_data: Donn√©es brutes de IGDB
    
    Returns:
        Dict normalis√© au format RAWG
    """
    # IGDB peut retourner 'release' (timestamp) ou 'first_release_date' (timestamp)
    release_ts = igdb_data.get('first_release_date') or igdb_data.get('release')
    
    # Extraire l'ann√©e depuis le timestamp
    release_year = "?"
    if release_ts:
        try:
            from datetime import datetime
            release_ts = int(release_ts)
            release_year = datetime.utcfromtimestamp(release_ts).strftime('%Y')
        except (ValueError, TypeError):
            pass
    
    # Normaliser les plateformes
    platforms = igdb_data.get('platforms', [])
    if isinstance(platforms, str):
        # Si c'est une string genre "PC, PS5, Xbox"
        platforms = [p.strip() for p in platforms.split(',')]
    elif not isinstance(platforms, list):
        platforms = []
    
    return {
        'name': igdb_data.get('name', 'Inconnu'),
        'slug': igdb_data.get('slug', ''),
        'summary': igdb_data.get('summary', 'Aucune description disponible.'),
        'release_date': release_ts,
        'release_year': release_year,
        'platforms': platforms,
        'first_release_date': release_ts,  # Garde aussi le format IGDB pour compatibilit√©
        # Champs RAWG absents dans IGDB
        'metacritic': None,
        'rating': None,
        'ratings_count': 0,
        'genres': [],
        'tags': [],
        'stores': [],
        'background_image': None,
    }
