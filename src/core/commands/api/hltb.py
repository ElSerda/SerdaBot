"""
HowLongToBeat API - Dur√©e de jeu estim√©e.

API: Non officielle, utilise la biblioth√®que howlongtobeatpy
Documentation: https://github.com/ScrappyCocco/HowLongToBeat-PythonAPI
"""
from typing import Dict, Optional


async def fetch_game_playtime(game_name: str) -> Optional[Dict]:
    """
    R√©cup√®re la dur√©e de jeu estim√©e depuis HowLongToBeat.
    
    Args:
        game_name: Nom du jeu √† rechercher
    
    Returns:
        Dict avec les dur√©es estim√©es, ou None si non trouv√©.
        
        Format retourn√©:
        {
            'game_name': str,
            'main_story': str | None,      # "30h" - Histoire principale
            'main_extra': str | None,      # "45h" - Histoire + extras
            'completionist': str | None,   # "120h" - 100%
            'all_styles': str | None,      # "50h" - Moyenne tous styles
        }
    
    Example:
        >>> data = await fetch_game_playtime("Hades")
        >>> print(f"Histoire: {data['main_story']}, 100%: {data['completionist']}")
        'Histoire: 22h, 100%: 95h'
    """
    # TODO: Installer la biblioth√®que howlongtobeatpy
    # pip install howlongtobeatpy
    
    try:
        # Import conditionnel pour √©viter les erreurs si pas install√©
        from howlongtobeatpy import HowLongToBeat
        
        print(f"[HLTB] üîç Recherche dur√©e pour '{game_name}'...")
        
        hltb = HowLongToBeat()
        results = await hltb.async_search(game_name)
        
        if not results:
            print(f"[HLTB] ‚ùå Aucun r√©sultat pour '{game_name}'")
            return None
        
        # Prendre le premier r√©sultat (meilleur match)
        game = results[0]
        
        result = {
            'game_name': game.game_name,
            'main_story': _format_hours(game.main_story),
            'main_extra': _format_hours(game.main_extra),
            'completionist': _format_hours(game.completionist),
            'all_styles': _format_hours(game.all_styles),
        }
        
        print(f"[HLTB] ‚úÖ Dur√©e trouv√©e: {result['main_story']} (histoire)")
        return result
        
    except ImportError:
        print("[HLTB] ‚ö†Ô∏è Biblioth√®que howlongtobeatpy non install√©e")
        print("[HLTB] üí° Installer avec: pip install howlongtobeatpy")
        return None
    except Exception as e:
        print(f"[HLTB] ‚ùå Erreur: {e}")
        return None


def _format_hours(hours: float | None) -> str | None:
    """
    Formate les heures en string lisible.
    
    Args:
        hours: Nombre d'heures (peut √™tre None ou 0)
    
    Returns:
        String format√©e ("30h") ou None
    """
    if not hours or hours <= 0:
        return None
    
    # Arrondir √† l'heure pr√®s
    hours_int = int(round(hours))
    
    if hours_int < 1:
        return "< 1h"
    
    return f"{hours_int}h"


async def format_playtime_message(data: Dict) -> str:
    """
    Formate les donn√©es de dur√©e en message concis.
    
    Args:
        data: Dict retourn√© par fetch_game_playtime()
    
    Returns:
        Message format√© pour Twitch
        
    Example:
        >>> msg = await format_playtime_message(data)
        '‚è±Ô∏è Hades: 22h (histoire) | 45h (100%)'
    """
    game_name = data.get('game_name', 'Jeu')
    parts = []
    
    # Histoire principale
    if data.get('main_story'):
        parts.append(f"{data['main_story']} (histoire)")
    
    # 100%
    if data.get('completionist'):
        parts.append(f"{data['completionist']} (100%)")
    
    # Si aucune donn√©e
    if not parts:
        return f"‚è±Ô∏è {game_name}: Dur√©e inconnue"
    
    return f"‚è±Ô∏è {game_name}: {' | '.join(parts)}"
