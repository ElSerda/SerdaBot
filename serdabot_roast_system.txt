# ===============================
# ðŸ¤– SerdaBot Roast System Module
# ===============================

# ---------- src/cogs/roast_manager.py ----------
import json
import os
from typing import Dict, List
from twitchio.ext import commands

DEFAULT_PATH = "config/roast.json"
MAX_USERS = 200
MAX_QUOTES = 200
MAX_QUOTE_LEN = 180

def _norm(u: str) -> str:
    return u.strip().lower()

def load_roast_config(path: str = DEFAULT_PATH) -> Dict[str, List[str]]:
    if not os.path.exists(path):
        return {"users": [], "quotes": []}
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    data.setdefault("users", [])
    data.setdefault("quotes", [])
    return data

def save_roast_config(data: Dict[str, List[str]], path: str = DEFAULT_PATH):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

class RoastManager(commands.Cog):
    def __init__(self, bot: commands.Bot, path: str = DEFAULT_PATH):
        self.bot = bot
        self.path = path
        self.data = load_roast_config(self.path)

    def _is_mod(self, ctx: commands.Context) -> bool:
        return getattr(ctx.author, "is_mod", False) or getattr(ctx.author, "is_broadcaster", False)

    @commands.command(name="addroast")
    async def add_roast_user(self, ctx: commands.Context, username: str = None):
        if not self._is_mod(ctx): return
        if not username:
            return await ctx.send("Usage: !addroast <username>")
        u = _norm(username)
        users = set(map(_norm, self.data["users"]))
        if len(users) >= MAX_USERS:
            return await ctx.send("Limite atteinte (users). Supprime quelquâ€™un avec !delroast.")
        if u in users:
            return await ctx.send(f"{username} est dÃ©jÃ  roastable.")
        users.add(u)
        self.data["users"] = sorted(users)
        save_roast_config(self.data, self.path)
        await ctx.send(f"{username} ajoutÃ© Ã  la liste roast âœ…")

    @commands.command(name="delroast")
    async def del_roast_user(self, ctx: commands.Context, username: str = None):
        if not self._is_mod(ctx): return
        if not username:
            return await ctx.send("Usage: !delroast <username>")
        u = _norm(username)
        users = set(map(_norm, self.data["users"]))
        if u not in users:
            return await ctx.send(f"{username} nâ€™est pas dans la liste.")
        users.remove(u)
        self.data["users"] = sorted(users)
        save_roast_config(self.data, self.path)
        await ctx.send(f"{username} retirÃ© de la liste roast âœ…")

    @commands.command(name="listroast")
    async def list_roast_users(self, ctx: commands.Context):
        if not self._is_mod(ctx): return
        users = self.data.get("users", [])
        if not users:
            return await ctx.send("Aucun utilisateur roastable.")
        preview = ", ".join(users[:15]) + ("â€¦" if len(users) > 15 else "")
        await ctx.send(f"Roastables ({len(users)}): {preview}")

    @commands.command(name="addquote")
    async def add_quote(self, ctx: commands.Context, *, text: str = None):
        if not self._is_mod(ctx): return
        if not text:
            return await ctx.send("Usage: !addquote <phrase>")
        text = text.strip()
        if len(text) > MAX_QUOTE_LEN:
            return await ctx.send(f"Max {MAX_QUOTE_LEN} caractÃ¨res.")
        quotes = self.data.get("quotes", [])
        if len(quotes) >= MAX_QUOTES:
            return await ctx.send("Limite atteinte (quotes). Supprime avec !delquote.")
        if text in quotes:
            return await ctx.send("DÃ©jÃ  enregistrÃ©e.")
        quotes.append(text)
        self.data["quotes"] = quotes
        save_roast_config(self.data, self.path)
        await ctx.send("Citation ajoutÃ©e âœ…")

    @commands.command(name="delquote")
    async def del_quote(self, ctx: commands.Context, index: str = None):
        if not self._is_mod(ctx): return
        if not index or not index.isdigit():
            return await ctx.send("Usage: !delquote <index> (voir !listquotes)")
        i = int(index)
        quotes = self.data.get("quotes", [])
        if not (0 <= i < len(quotes)):
            return await ctx.send("Index invalide.")
        removed = quotes.pop(i)
        self.data["quotes"] = quotes
        save_roast_config(self.data, self.path)
        await ctx.send(f"SupprimÃ©e: {removed[:40]}{'â€¦' if len(removed)>40 else ''}")

    @commands.command(name="listquotes")
    async def list_quotes(self, ctx: commands.Context):
        if not self._is_mod(ctx): return
        quotes = self.data.get("quotes", [])
        if not quotes:
            return await ctx.send("Aucune citation.")
        head = " | ".join(f"[{i}] {q[:30]}{'â€¦' if len(q)>30 else ''}" for i, q in enumerate(quotes[:5]))
        tail = f" (+{len(quotes)-5} de plus)" if len(quotes) > 5 else ""
        await ctx.send(f"Quotes: {head}{tail}")

def prepare(bot: commands.Bot, path: str = DEFAULT_PATH):
    bot.add_cog(RoastManager(bot, path))

# ---------- src/core/prompt_builder.py ----------
from typing import Optional
from cogs.roast_manager import load_roast_config, DEFAULT_PATH

SYSTEM = """
Tu es serda_bot, un bot Twitch francophone, fun et complice.
RÃˆGLES GÃ‰NÃ‰RALES :
- Toujours UNE SEULE phrase, 20â€“30 mots max OU 150 caractÃ¨res max.
- Pas de /me, pas de hashtags. 0â€“2 Ã©mojis max. Ton direct, amical.
- Si tu ne sais pas, dis-le simplement.
"""

_roast_cache = load_roast_config(DEFAULT_PATH)
def reload_roast_config(path: str = DEFAULT_PATH):
    global _roast_cache
    _roast_cache = load_roast_config(path)

def make_prompt(mode: str, content: str, user: str, game: Optional[str], title: Optional[str]) -> str:
    base = f"Contexte: Jeu={game or 'inconnu'}, Titre={title or '-'}.\n"
    roast_users = {u.lower() for u in _roast_cache.get("users", [])}
    quotes = _roast_cache.get("quotes", [])

    if user.lower() in roast_users:
        base += (
            f"Le message vient de ton crÃ©ateur/roast-target ({user}). "
            "Active un roast taquin (jamais mÃ©chant). "
        )
        if quotes:
            joined = " | ".join(quotes[:8])
            base += f"Tu peux tâ€™inspirer de ses excuses/citations: {joined}.\n"

    if mode == "ask":
        base += f"Question: Â«{content}Â». RÃ©ponds clairement en 1 phrase."
    elif mode == "chill":
        base += f"Viewer: Â«{content}Â». RÃ©ponds fun et complice."
    elif mode == "trad":
        base += f"Ã€ traduire en FR naturel: Â«{content}Â»."
    elif mode == "reactor":
        base += f"Le chat spam: Â«{content}Â». RÃ©agis en lien avec {game or 'le jeu'}."
    else:
        base += f"Message: Â«{content}Â»."

    return base.strip()
